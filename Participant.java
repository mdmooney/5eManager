import javax.swing.*;
import java.util.Random;

/**
 * Class for participants in an encounter (i.e. the combatants). This includes players and monsters. It exists because there
 * is no need for every instance variable of monster or player objects to be editable in combat, or really any at all; all that
 * needs to be tracked in combat is current HP, initiative, and current conditions. These are handled the same for players and
 * monsters. To display the appropriate statblock as needed, Participant objects keep references to the monster or player they
 * are meant to represent, but do not manipulate these objects.
 */

public class Participant implements Comparable<Participant> {
    private int currentHp;
    private int maxHp;
    private int initiative;
    private int currentRound; //the round the Participant is presently in, used to refine initiative tracking
    private int number; //number of the participant in the initiative order to distinguish between things with the same name
    private Fightable fightable;
    private String name;
    private String notes;
    private String hpString;

    /**
     * Sole constructor for the Participant class. Sets up all attributes based on a reference Fightable.
     * @param fightable Object implementing the Fightable interface, providing object reference, maxHP, and name.
     */
    public Participant(Fightable fightable) {
        this.fightable = fightable;
        this.currentHp = fightable.getHp();
        this.maxHp = fightable.getHp();
        this.name = fightable.getName();
        this.hpString = currentHp + "/" + maxHp;
        this.currentRound = 1;
        this.number = 0;
    }

    /**
     * Override for comparison between Participants. Compares solely by names (ignoring case).
     * @param p Participant to be compared.
     * @return A negative integer, zero, or a positive integer as this Participant is less than, equal to, or greater than the specified Paricipant.
     */
    @Override
    public int compareTo(Participant p) {
        return this.name.compareToIgnoreCase(p.getName());
    }

    /**
     * Override for representing Participants as a string. Displays the name.
     * @return The name of the Participant.
     */
    @Override
    public String toString() {
        return this.getName();
    }

    /**
     * Sets the name of the Participant (defaults to the Fightable reference object's name by the constructor)
     * @param name The new name for the Participant.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the name of the Participant. This is what is normally shown by the Encounter table in the MainWindow.
     * @return The name of the Participant.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the base name of the Fightable, that is, the name of the reference Fightable object irrespective of any
     * changes made to the Participant object itself.
     * @return The name of the Fightable object to which the Participant refers.
     */
    public String getBaseName() {return "" + fightable.getName();}

    /**
     * Returns the block panel (JPanel of information) on the Fightable object referred to by the Participant.
     * This is provided for by the Fightable interface, but may be implemented differently by different types of Fightables.
     * @return The information block panel.
     */
    public JPanel getBlock() {
        return fightable.getBlockPanel();
    }

    /**
     * Calculates a random HP value generated by the Monster class of Fightables only. This does nothing for other Fightables.
     * This value then replaces the maximum HP value of the Participant, defaulting to the max HP of the reference Fightable
     * when the Participant is created by the constructor.
     */
    public void getRandomHp() {
        if (fightable.getClass() == Monster.class) {
            this.maxHp = ((Monster) fightable).getRandomHp();
            this.currentHp = this.maxHp;
            updateHpString();
        }
    }

    /**
     * "Rolls" initiative by generating a random number between 1 and 20 (simulating a d20 roll) modified by the Fightable
     * object's initiative modifier.
     * @return The initiative score for the Participant.
     */
    public int rollInitiative() {
        return new Random().nextInt(19) + 1 + (fightable.getInitiative());
    }

    /**
     * Returns the Participant's initiative.
     * As in D&D, this is used mainly for determining order of combatants' turns in an encounter.
     * This defaults to 0 in the constructor and can be set manually in the MainWindow or rolled for (generated randomly).
     * @return The initiative value for the Participant.
     */
    public int getInitiative() {
        return initiative;
    }

    /**
     * Sets the Participant's initiative to a particular value.
     * Used when initiative is preferred not to be rolled but instead set, for instance if the DM or player wishes to
     * roll for their own initiative.
     * @param initiative The new initiative value to use.
     */
    public void setInitiative(int initiative) {
        this.initiative = initiative;
    }

    /**
     * Get the Participant's current HP, which is (normally) its maximum HP minus any damage that has been done to it.
     * @return The Participant's current HP.
     */
    public int getCurrentHp() {
        return currentHp;
    }

    /**
     * Get the Participant's maximum HP, which is based solely on the Fightable object it refers to unless a randomly
     * generated value replaces it (only works for monsters, however).
     * @return The participant's maximum HP.
     */
    public int getMaxHp() {
        return maxHp;
    }

    /**
     * Set the current HP to some value.
     * This is normally used when the Participant takes damage or heals in combat.
     * @param currentHp The new value to use for the Participant's current HP.
     */
    public void setCurrentHp(int currentHp) {
        this.currentHp = currentHp;
    }

    /**
     * Returns the "HP String" of the Participant, which is in the form of "(current)/(max)" where current is the
     * Participant's current HP and (max) is the Participant's maximum HP.
     * This is updated by means of the updateHpString() method; this method merely displays it.
     * @return The HP string as (current)/(max)
     */
    public String getHpString() {
        return hpString;
    }

    /**
     * Updates the "HP String" of the Participant, which is in the form of "(current)/(max)" where current is the
     * Participant's current HP and (max) is the Participant's maximum HP.
     * This method resets the string to reflect any new values for current or maximum HP.
     */
    public void updateHpString() {
        this.hpString = currentHp + "/" + maxHp;
    }

    /**
     * Returns the Participant's armour class, or AC. This is based solely on the value for the Fightable object, as
     * this will very rarely change in combat (too rarely to provide for programmatically)
     * @return The Participant's armour class, or AC.
     */
    public int getAc() {
        return this.fightable.getAc();
    }

    /**
     * Determines the class of the Fightable.
     * In most cases, it is sufficient to refer to the Fightable objects solely by virtue of their implementing the
     * Fightable interface, but in some scenarios it is necessary to distinguish between Fightable types (e.g. Monster
     * vs Player). For these cases, this method returns the class of the reference Fightable.
     * @return The class of the Fightable object to which the Participant refers.
     */
    public java.lang.Class getFightableClass() {
        return this.fightable.getClass();
    }

    /**
     * Gets the Participant's current round. Initiative is tracked in Encounters by round first, and initiative second.
     * This method is needed to determine which round the Participant is currently acting in, as one full round must
     * be completed (i.e. all Participants must experience and pass through a given round) before the next round can begin.
     * @return The current round of the Participant.
     */
    public int getCurrentRound() {return this.currentRound;}

    /**
     * Sets the Participant's current round. This is normally used after the "Next Turn" button is clicked in the MainWindow,
     * where the round advances and the Participant is placed at the bottom of the initiative order (i.e. set to come up again
     * when it's initiative value comes up in the following round to the one previously experienced by that Participant).
     * @param currentRound The new current round for the Participant. Usually the existing curent round + 1.
     */
    public void setCurrentRound(int currentRound) {this.currentRound = currentRound;}

    /**
     * Gets the Participant's number. This is used to distinguish between Participants of the same name in a given encounter,
     * and typically only for monsters (though if this class ever extends to include other Fightables, such as traps for instance,
     * that are not necessarily unique, the same could be used for them).
     * @return The number of the Participant.
     */
    public int getNumber() {
        return number;
    }

    /**
     * Sets the Participant's number. This is used to distinguish between Participants of the same name in a given encounter,
     * and typically only for monsters (though if this class ever extends to include other Fightables, such as traps for instance,
     * that are not necessarily unique, the same could be used for them).
     * @param number The new number to use for the Participant. An integer, generally > 0 and <= the number of equally-named Participants in the encounter.
     */
    public void setNumber(int number) {
        this.number = number;
    }

    /**
     * Gets the Participant's "notes," which is a String normally edited by the user during an encounter to track any miscellaneous information
     * pertinent only to that Participant or that encounter.
     * @return The notes string.
     */
    public String getNotes() {return this.notes;}

    /**
     * Sets the Participant's "notes," which is a String normally edited by the user during an encounter to track any miscellaneous information
     * pertinent only to that Participant or that encounter. This is done e.g. by a small text box in the MainWindow's control panel.
     * @param notes The updated notes String.
     */
    public void setNotes(String notes) {
        this.notes = notes;
    }
}
